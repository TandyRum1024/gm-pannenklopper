<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>3</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>RES_W = -1;
RES_H = -1;
RES_W[0] = 1280; RES_H[0] = 720;
RES_W[1] = 1024; RES_H[1] = 768;
RES_W[2] = 800; RES_H[2] = 600;
RES_W[3] = 1600; RES_H[3] = 900;
RES_IDX = 0;

set_resolution(RES_W[RES_IDX], RES_H[RES_IDX]);
SCREEN_ROT = 0;

enum COL
{
    DARK = $7F423B,
    BASE = $9F524A,
    LIGHT = $FF8477,
    GRAY = $7F6966,
    WHITE = $FFC9C3
}

global.gameTitle = true;
global.gameTitleReady = false;
global.gameTitleCtr = 0;
global.gameTitleSettings = false;
global.gameTitleSettingsReset = false;

global.gameReady = false;
global.gameReadyCtr = 120;
global.gameOver = false;

global.intro = false;
global.introDone = false;
global.introPanReady = false;
global.introState = 0;

global.shake = 0;

global.settingsUpdated = false;
global.settingsIdx = 0;
global.gameHiScoreGot = false;
global.gameHiScore = 0;
global.gameScore = 0;
global.gameTime = 0;
spawnCtr = 0;

// disable autodraw
//application_surface_enable(false);
application_surface_draw_enable(false);

global.fntMain = font_add("data/neodgm.ttf", 12, false, false, 0, 0);
global.fntTitle = font_add("data/Sam3KRFont.ttf", 12, false, false, 0, 0);
draw_set_font(global.fntMain);

// MUSIC &amp; SOUND
MUS_STARTUP = -1;
MUS_STARTUP[0] = musBitloader;
MUS_STARTUP[1] = musComputerscrew;
MUS_STARTUP[2] = musNeontechno;

MUS_INGAME = -1;
MUS_INGAME[0] = musBitloader;
MUS_INGAME[1] = musComputerscrew;
MUS_INGAME[2] = musNeontechno;
MUS_INGAME[3] = musNecromancercastle;
MUS_INGAME[4] = musAeolus;
MUS_INGAME[5] = musHitthecheek;

randomize();
global.volumeModifier = 0.25;
global.SFXvolume = 0.5;

global.BGMvolume = 0.5;
global.BGMvolumeTitle = global.BGMvolume * global.volumeModifier * 1.1;
global.BGM = -1;
global.BGMPlaying = false;
bgm_set(pick_array(MUS_STARTUP), 0);

// Ready frying pan
// pan_reset();

// LOAD STUFF
global.lang_file = ds_list_create();
global.lang_name = ds_list_create();
global.lang_idx = 0;
global.lang = ds_map_create();
load_save();

if (!load_localization("local_english.json"))
    reset_localization();

audio_sound_gain(global.BGM, global.BGMvolumeTitle, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// spawn frying pan
if (global.introPanReady)
{
    global.introPanReady = false;
    
    var _inst = pan_reset();
    _inst.active = false;
    _inst.canPhysics = false;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// shake
global.shake = lerp(global.shake, 0, 0.1);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// game logic
if (global.gameTitle)
{
    if (!global.BGMPlaying)
        bgm_set(pick_array(MUS_STARTUP), 0);

    global.gameReady = false;
    if (keyboard_check_pressed(ord('Z')) &amp;&amp; !global.gameTitleReady)
    {
        global.gameTitleCtr = 60;
        global.gameTitleReady = true;
        bgm_set(-1, 500);
    }
    else if (keyboard_check_pressed(vk_f1) &amp;&amp; !global.gameTitleReady)
    {
        global.gameTitleSettings = !global.gameTitleSettings;
        global.gameTitleSettingsReset = false;
        
        if (!global.gameTitleSettings)
        {
            update_save();
            load_save();
        }
    }
    
    if (global.gameTitleSettings)
    {
        if (keyboard_check_pressed(vk_f9))
        {
            new_save();
            load_save();
            global.gameTitleSettingsReset = true;
        }
        
        if (keyboard_check_pressed(vk_up))
            global.settingsIdx = (global.settingsIdx + 3) % 4;
        else if (keyboard_check_pressed(vk_down))
            global.settingsIdx = (global.settingsIdx + 1) % 4;
            
        if (keyboard_check_pressed(vk_add) || keyboard_check_pressed(vk_right))
        {
            switch (global.settingsIdx)
            {
                case 0:
                    global.BGMvolume = median(0, 1, global.BGMvolume + 0.1);
                    break;
                case 1:
                    global.SFXvolume = median(0, 1, global.SFXvolume + 0.1);
                    emit_sfx(sndPanHit_A, 1, 1);
                    break;
                case 2:
                    RES_IDX = (RES_IDX + 1) % array_length_1d(RES_W);
                    set_resolution(RES_W[RES_IDX], RES_H[RES_IDX]);
                    break;
                case 3:
                    global.lang_idx = (global.lang_idx + 1) % ds_list_size(global.lang_file);
                    load_localization(global.lang_file[| global.lang_idx]);
                    break;
            }
            
            audio_sound_gain(global.BGM, global.BGMvolume * global.volumeModifier, 500);
        }
        else if (keyboard_check_pressed(vk_subtract) || keyboard_check_pressed(vk_left))
        {
            switch (global.settingsIdx)
            {
                case 0:
                    global.BGMvolume = median(0, 1, global.BGMvolume - 0.1);
                    break;
                case 1:
                    global.SFXvolume = median(0, 1, global.SFXvolume - 0.1);
                    emit_sfx(sndPanHit_A, 1, 1);
                    break;
                case 2:
                    RES_IDX = (RES_IDX - 1 + array_length_1d(RES_W)) % array_length_1d(RES_W);
                    set_resolution(RES_W[RES_IDX], RES_H[RES_IDX]);
                    break;
                case 3:
                    global.lang_idx = (global.lang_idx - 1 + ds_list_size(global.lang_file)) % ds_list_size(global.lang_file);
                    load_localization(global.lang_file[| global.lang_idx]);
                    break;
            }
            
            audio_sound_gain(global.BGM, global.BGMvolume * global.volumeModifier, 500);
        }
    }
    
    if (global.gameTitleReady)
    {
        if (global.gameTitleCtr &gt; 0)
            global.gameTitleCtr--;
        else
        {
            global.gameTitle = false;
            game_reset();
            
            if (!global.intro)
                pan_reset();
        }
    }
}
else
{
    if (!global.gameOver &amp;&amp; !global.BGMPlaying)
        bgm_set(pick_array(MUS_INGAME), 0);
    else if (global.gameOver)
    {
        bgm_set(-1, 0);
        
        if (!global.settingsUpdated)
        {
            global.settingsUpdated = true;
            
            // bummer
            emit_sfx(sndOof, 1, 1);
            
            // check hi-score
            if (global.gameScore &gt; global.gameHiScore)
            {
                global.gameHiScore = global.gameScore;
                global.gameHiScoreGot = true;
            }
        }
    }

    if (!global.intro)
    {
        if (!global.gameReady)
        {
            if (global.gameReadyCtr &gt; 0)
                global.gameReadyCtr--;
            else
            {
                global.gameReady = true;
                if (instance_exists(oPAN))
                    oPAN.canPhysics = true;
            }
                
            with (oGAMER)
            {
                instance_destroy(id);
            }
        }
        else
        {
            var _difficulty = max(global.gameTime * 0.002, 0);
            var _difficultyInt = floor(global.gameTime * 0.001) * 0.5;
            
            global.gameTime++;
            
            // spawn gamers
            if (spawnCtr &gt; 0)
                spawnCtr--;
            else
            {
                spawnCtr = random_range(max(40 - _difficulty, 10), max(20, 80 - _difficulty * 0.1));
                var _inst = instance_create(choose(-42, room_width + 42), GROUND_Y, oGAMER);
                _inst.moveVel += _difficultyInt;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>update_save();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="77">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw application surface w/ border
draw_clear(COL.LIGHT);

// wow!!
var _shx = random_range(-global.shake, global.shake);
var _shy = random_range(-global.shake, global.shake);
var _sha = random_range(-global.shake * 0.3, global.shake * 0.3);

var _sw = (surface_get_width(application_surface) &gt;&gt; 1) * SCREEN_MULT;
var _sh = (surface_get_height(application_surface) &gt;&gt; 1) * SCREEN_MULT;
draw_surface_ext(application_surface, WIN_HWID - _sw + _shx, WIN_HHEI - _sh + _shy, SCREEN_MULT, SCREEN_MULT, SCREEN_ROT + _sha, c_white, 1);

// debug
//draw_set_halign(0); draw_set_valign(0);
//ui_text(10, 10, "GAMETIME : " + string(global.gameTime), 1, 1, 0, COL.WHITE, 1);
//ui_text(10, 30, "SPAWNCTR : " + string(spawnCtr), 1, 1, 0, COL.WHITE, 1);
//ui_text(10, 10, "INTRO : " + string(global.introState), 1, 1, 0, COL.WHITE, 1);
//ui_text(10, 30, "QUIP \#" + string(oPIZZA.quipIdx) + " : " + oPIZZA.quipCurrent, 1, 1, 0, COL.WHITE, 1);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw UI
if (global.gameTitle)
{
    draw_clear(COL.DARK);
    draw_set_halign(1); draw_set_valign(0);
    var _tx = room_width &gt;&gt; 1, _ty = (room_height &gt;&gt; 1) - 64;
    
    if (!global.gameTitleSettings)
    {
        // title text
        draw_set_font(global.fntTitle);
        var _str = global.lang[? "TITLE_TEXT"];
        draw_set_valign(1);
        ui_text(_tx, _ty + 6, _str, 3, 6, 0, COL.GRAY, 1);
        ui_text(_tx, _ty, _str, 3, 6, 0, COL.LIGHT, 1);
        draw_set_valign(0);
        draw_set_font(global.fntMain);
        
        // keys
        ui_text(_tx, _ty + 64, global.lang[? "TITLE_KEYS"], 1, 1, 0, COL.WHITE, 1);
        
        // brag text
        ui_text(_tx, 10, global.lang[? "TITLE_SCORE"] + string(global.gameHiScore), 1, 1, 0, COL.LIGHT, 1);
        
        draw_set_valign(2);
        ui_text(_tx, room_height - 10, global.lang[? "TITLE_BRAG"], 1, 1, 0, COL.WHITE, 1);
        draw_set_valign(0);
    }
    else
    {   
        // settings
        ui_text(_tx, 10, global.lang[? "SETTINGS_KEYS_TOP"], 1, 1, 0, COL.WHITE, 1);
        if (global.gameTitleSettingsReset)
            ui_text(_tx, 30, global.lang[? "SETTINGS_DELETE"], 1, 1, 0, COL.LIGHT, 1);
        ui_text(_tx, room_height - 42, global.lang[? "SETTINGS_KEYS_BOTTOM"], 1, 1, 0, COL.LIGHT, 1);
        
        draw_set_font(global.fntTitle);
        var _str = global.lang[? "SETTINGS_TITLE"];
        draw_set_valign(1);
        ui_text(_tx, _ty - 14, _str, 2, 2, 0, COL.GRAY, 1);
        ui_text(_tx, _ty - 16, _str, 2, 2, 0, COL.LIGHT, 1);
        draw_set_valign(0);
        draw_set_font(global.fntMain);
        
        // menu
        _ty -= 6;
        ui_text(_tx, _ty + 14, global.lang[? "SETTINGS_VOLUME_MUSIC"] + string(global.BGMvolume), 1, 1, 0, COL.WHITE, 1);
        ui_text(_tx, _ty + 44, global.lang[? "SETTINGS_VOLUME_SOUND"] + string(global.SFXvolume), 1, 1, 0, COL.WHITE, 1);
        ui_text(_tx, _ty + 74, global.lang[? "SETTINGS_RESOLUTION"] + string(WIN_WID) + " x " + string(WIN_HEI), 1, 1, 0, COL.WHITE, 1);
        ui_text(_tx, _ty + 104, global.lang[? "SETTINGS_LANG"], 1, 1, 0, COL.WHITE, 1);
        var _txt = "[", _sz = ds_list_size(global.lang_name);
        for (var i=0; i&lt;_sz; i++)
        {
            if (i == global.lang_idx) _txt += "&lt;";
            _txt += global.lang_name[| i];
            if (i == global.lang_idx) _txt += "&gt;";
            if (i != _sz - 1) _txt += ", ";
        }
        ui_text(_tx, _ty + 124, _txt + "]", 1, 1, 0, COL.LIGHT, 1);
        _ty += 6;
        
        // point
        draw_sprite(sPoint, 0, _tx - 128, _ty + 14 + global.settingsIdx * 30);
    }
}
else if (!global.intro)
{
    if (global.gameReady)
    {
        if (!global.gameOver)
        {
            draw_set_halign(1); draw_set_valign(0);
            var _tx = room_width &gt;&gt; 1, _ty = 10;
            
            // score
            var _str = global.lang[? "INGAME_SCORE"] + string(global.gameScore);
            ui_text(_tx, _ty + 1, _str, 1, 1, 0, COL.GRAY, 1);
            ui_text(_tx, _ty, _str, 1, 1, 0, COL.WHITE, 1);
            
            draw_set_halign(0);
            _str = global.lang[? "INGAME_HISCORE"] + string(global.gameHiScore);
            ui_text(10, _ty + 1, _str, 1, 1, 0, COL.BASE, 1);
            ui_text(10, _ty, _str, 1, 1, 0, COL.LIGHT, 1);
        }
        else
        {
            draw_clear(COL.DARK);
        
            draw_set_halign(1); draw_set_valign(0);
            var _tx = room_width &gt;&gt; 1, _ty = (room_height &gt;&gt; 1) - 42;
            var _str = global.lang[? "END_TEXT"];
            
            ui_text(_tx, _ty + 1, _str, 1, 1, 0, COL.GRAY, 1);
            ui_text(_tx, _ty, _str, 1, 1, 0, COL.WHITE, 1);
            
            ui_text(_tx, _ty + 72, global.lang[? "END_SCORE"] + string(global.gameScore), 1, 1, 0, COL.LIGHT, 1);
            ui_text(_tx, _ty + 84, global.lang[? "END_HISCORE"] + string(global.gameHiScore), 1, 1, 0, COL.GRAY, 1);
            
            if (global.gameHiScoreGot)
                ui_text(_tx, _ty + 96, global.lang[? "END_NEW_BEST"], 1, 1, 0, COL.WHITE, 1);
        }
    }
    else 
    {
        draw_set_halign(1); draw_set_valign(0);
        var _tx = room_width &gt;&gt; 1, _ty = (room_height &gt;&gt; 1) - 12;
        var _str = global.lang[? "INGAME_READY"];
        ui_text(_tx, _ty + 1, _str, 1, 1, 0, COL.GRAY, 1);
        ui_text(_tx, _ty, _str, 1, 1, 0, COL.WHITE, 1);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw ground
draw_rectangle_colour(0, GROUND_Y, room_width, room_height, COL.BASE, COL.BASE, COL.BASE, COL.BASE, false);
draw_rectangle_colour(0, GROUND_Y, room_width, GROUND_Y, COL.LIGHT, COL.LIGHT, COL.LIGHT, COL.LIGHT, false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!global.intro)
{
    game_reset();
    pan_reset();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="67">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
if (!global.intro)
    intro_play();
else
{
    oPIZZA.quipDelayT = 30;
    oPIZZA.quipDone = true;
    oPIZZA.quipT = string_length(oPIZZA.quipCurrent) + 1;
}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>game_reset();
global.gameTitle = true;
global.gameTitleCtr = 60;
global.gameTitleReady = false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
