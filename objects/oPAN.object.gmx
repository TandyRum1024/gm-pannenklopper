<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sPan</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>vx = 0;//random_range(-2, 2);
vy = 0;//random_range(-4, 4);
vt = 0;//random_range(-8, 8); // torque

canPhysics = false;
active = false;
activeHits = 7;

groundPound = false;

spawnCtr = 0;
shake = 0;
rot = 0;
mask_index = sPanMask;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// update
if (spawnCtr &gt; 0)
    spawnCtr--;

if (canPhysics)
{
    if (vy &lt; 5)
        vy += 0.3;
    else
        vy = 5;
}

shake = lerp(shake, 0, 0.25);
if (shake &lt; 0.1) shake = 0;

if (y &gt; GROUND_Y)
{
    y = GROUND_Y;
    vy = -10;
    
    rot = 0;
    vt = random_range(-8, 8);
    
    if (!groundPound)
    {
        groundPound = true;
        global.shake += 4;
        
        // SMASH
        var _inst = instance_create(x, GROUND_Y, oSMASH);
        _inst.image_xscale = 2;
        
        emit_sfx(sndSlam, 1, random_range(0.9, 1.1));
        
        // BOOM
        repeat (irandom_range(1, 3))
        {
            _inst = instance_create(x, GROUND_Y, oFX_BOOM);
        }
    }
    else
    {
        // sound effect
        emit_sfx(choose(sndPanHit1, sndPanHit2, sndPanHit3), 0.42, random_range(0.9, 1.1));
    
        global.shake += 2;
    }
}

if (bbox_right &gt; room_width &amp;&amp; vx &gt; 0)
{
    // apply torque
    vt = random_range(-4, -2);
    
    x = room_width - (bbox_right - x);
    vx *= -1;
    
    // sound effect
    emit_sfx(choose(sndPanHit1, sndPanHit2, sndPanHit3), 0.42, random_range(0.9, 1.1));
    
    global.shake += 2;
}
if (bbox_left &lt; 0 &amp;&amp; vx &lt; 0)
{
    // apply torque
    vt = random_range(4, 2);

    x = (x - bbox_left);
    vx *= -1;
    
    // sound effect
    emit_sfx(choose(sndPanHit1, sndPanHit2, sndPanHit3), 0.42, random_range(0.9, 1.1));
    
    global.shake += 2;
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// update position, rotation
if (canPhysics)
{
    x += vx;
    y += vy;
}

rot += vt;
rot = (rot + 360) % 360;

image_angle = rot;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oBULLET">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// apply torque &amp; knockback
var _absrot = ((rot + 90) % 180) - 180;
var _dx = x - other.x, _dy = y - other.y;
var _nx = lengthdir_x(1, _absrot), _ny = lengthdir_y(1, _absrot);

// bail out if hit already
if (!other.hitPan)
{
    other.hitPan = true;
    groundPound = false;
    
    if (activeHits &gt; 0)
        activeHits--;
    else
        active = true;

    // Apply torque
    // Cross(u, v) = u.x*v.y-u.y*v.x
    var _scale = 0.01;
    vt += (_dx * other.vy - _dy * other.vx) * _scale;
    
    // sound effect
    emit_sfx(choose(sndPanHit1, sndPanHit2, sndPanHit3), 1, random_range(0.95, 1.05));
    
    // apply knockback
    if (active)
    {
        vx += random_range(-1, 1);
        vx = clamp(vx, -2, 2);
        vy = other.vy * 0.5;
    }
    
    // shake pan
    shake += 4;
    shake = min(shake, 8);
    
    // reflect bullet.. bollywood style
    var _closestGamer = noone;
    var _mindist = 4096;
    with (oGAMER)
    {
        if (!dead)
        {
            var _dx = oPIZZA.x - x, _dy = oPIZZA.y - y;
            var _dist = abs(_dx) + abs(_dy);
            
            if (_dist &lt; _mindist)
            {
                _mindist = _dist;
                _closestGamer = id;
            }
        }
    }
    
    if (_closestGamer == noone)
    {
        other.vx = _nx * 4;
        other.vy = _ny * 4;
    }
    else
    {
        var _dist = point_distance(x, y, _closestGamer.x + (_closestGamer.vx), _closestGamer.y) / 8;
        var _dir = point_direction(x, y, _closestGamer.x + (_closestGamer.vx * _dist), _closestGamer.y);
        other.vx = lengthdir_x(8, _dir);
        other.vy = lengthdir_y(8, _dir);
        other.target = _closestGamer;
    }
}
//instance_destroy(other);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var _shx = floor(random_range(-shake, shake)), _shy = floor(random_range(-shake, shake));
var _flicker = 1;

if (spawnCtr &gt; 0)
    _flicker = (spawnCtr &gt;&gt; 1) &amp; 1;
draw_sprite_ext(sprite_index, image_index, x + _shx, y + _shy, image_xscale, image_yscale, image_angle, image_blend, image_alpha * _flicker);

//var _absrot = ((rot + 90) % 180) - 180;
//var _nx = lengthdir_x(1, _absrot), _ny = lengthdir_y(1, _absrot);
//draw_arrow(x + 64, y, x + _nx * 32 + 64, y + _ny * 32, 8);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
