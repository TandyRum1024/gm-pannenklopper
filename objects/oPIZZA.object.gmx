<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sPizza</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///quip stuff
event_user(0);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// magical self-repositioning magic
x = room_width &gt;&gt; 1;
y = GROUND_Y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (dead)
{
    sprite_index = sPizzaDead;
    
    if (deadCtr &gt; 0)
        deadCtr--;
    else
        global.gameOver = true;
}
else
    sprite_index = sPizza;

if (global.intro)
{
    if (quipDelayT &gt; 0)
        quipDelayT--;
    else
    {
        if (quipT &lt; string_length(quipCurrent))
        {
            quipDelayT = 1;
            quipT++;
        }
        else
        {
            if (!quipDone)
            {
                quipDone = true;
                quipDelayT = 120;
            }
            else
            {
                quipDone = false;
                
                var _quipsize = array_length_1d(quipPool) - 1;
                switch (global.introState)
                {
                    case 0: // INTRO #1 -- Pizza Plea
                        var _pmove = 64, _pschut = 3;
                        
                        if (instance_exists(oPLR))
                        {
                            _pmove = oPLR.tutMoved;
                            _pshoot = oPLR.tutSchut;
                        }
                        
                        if (quipIdx == 0) // next line
                        {
                            quipIdx++;
                            quipT = 0;
                            
                            oPLR.tutMoved = 0;
                            oPLR.tutSchut = 0;
                        }
                        else if (_pmove &gt;= 64 &amp;&amp; _pshoot &gt;= 3) // next quip -- Check Movement
                        {
                            global.introState = 1;
                            quipIdx = 0;
                            quipT = 0;
                            quipPool = QUIP_INTRO2;
                        }
                        
                        quipCurrent = quipPool[min(quipIdx, _quipsize)];
                        break;
                        
                    case 1: // INTRO #2 -- Movement tutorial
                        var _panActive = false;
                        if (instance_exists(oPAN))
                            _panActive = oPAN.active;
                        
                        if (quipIdx == 0) // line 1 -- compliment
                        {
                            quipIdx++;
                            quipT = 0;
                            
                            // spawn pan &amp; gamer
                            global.introPanReady = true;
                            
                            repeat (6)
                            {
                                var _x = random_range(80, room_width - 80);
                                
                                while (abs(_x - x) &lt; 32)
                                    _x = random_range(80, room_width - 80);
                                
                                var _inst = spawn_dummy_poof(_x, GROUND_Y);//instance_create(_x, y, oGAMER);
                                _inst.clueless = true;
                            }
                        }
                        else if (quipIdx == 1) // line 2 -- Frying pan test!!
                        {
                            if (_panActive)
                            {
                                quipIdx++;
                                quipT = 0;
                            }
                        }
                        else if (quipIdx &lt; _quipsize)
                        {
                            quipIdx++;
                            quipT = 0;
                        }
                        else // drop the pan &amp; begin the game
                        {
                            quipIdx = 0;
                            quipPool = -1;
                            global.intro = false;
                            global.introDone = true;
                            
                            global.gameReady = false;
                            global.gameReadyCtr = 60;
                            oPAN.canPhysics = true;
                        }
                        
                        
                        if (quipPool != -1)
                            quipCurrent = quipPool[min(quipIdx, _quipsize)];
                        else
                            quipCurrent = "";
                        break;
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oGAMER">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// OW
if (!dead)
{
    if (!other.dead)
    {
        var _inst = instance_create(x, y, oBOOM);
        
        repeat (irandom_range(3, 7))
        {
            _inst = instance_create(x + random_range(-16, 16), y + random_range(-16, 16), oFX_BOOM);
        }
        
        global.shake = 8;
        
        life--;
        
        if (life &lt;= 0 &amp;&amp; !dead)
        {
            dead = true;
            deadCtr = 60;
            
            quipCurrent = pick_array(QUIP);
            quipT = string_length(quipCurrent);
            
            // sound effect
            emit_sfx(sndCROMGCH, 1, random_range(0.95, 1.05));
            audio_sound_gain(global.BGM, 0, 0);
        }
        else
        {
            // sound effect
            emit_sfx(sndCROMGCH, 1, random_range(0.95, 1.05));
            emit_sfx(sndEXPLODE, 0.8, random_range(0.95, 1.05));
        }
    }
}
else
{
    instance_destroy(other);
    global.shake = 4;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Quip stuff
var LOC = global.lang;
var _prefix, _idx, val;
QUIP = -1;
QUIP_INTRO1 = -1;
QUIP_INTRO2 = -1;

/// Dead quips
// Load quips from localization data
_prefix = "DORO_OUCH_";
_idx = 1;
_val = ds_map_find_value(LOC, _prefix + string(_idx));
while (_val != undefined)
{
    QUIP[_idx - 1] = _val;
    _idx++;
    _val = ds_map_find_value(LOC, _prefix + string(_idx));
}

// Intro quips
// Load quips from localization data
_prefix = "DORO_INTRO_1_";
_idx = 1;
_val = ds_map_find_value(LOC, _prefix + string(_idx));
while (_val != undefined)
{
    QUIP_INTRO1[_idx - 1] = _val;
    _idx++;
    _val = ds_map_find_value(LOC, _prefix + string(_idx));
}

_prefix = "DORO_INTRO_2_";
_idx = 1;
_val = ds_map_find_value(LOC, _prefix + string(_idx));
while (_val != undefined)
{
    QUIP_INTRO2[_idx - 1] = _val;
    _idx++;
    _val = ds_map_find_value(LOC, _prefix + string(_idx));
}

quipDelayT = 60;
quipT = 0;
quipIdx = 0;
quipPool = QUIP_INTRO1;
quipCurrent = quipPool[quipIdx];
quipDone = false;

dead = false;
deadCtr = 60;
life = 3;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();

draw_set_halign(1); draw_set_valign(2);
var _text = string_copy(quipCurrent, 1, quipT);
ui_text(x, y - 32, _text, 1, 1, 0, COL.WHITE, 1);

if (dead)
    ui_text(x, y - 62, global.lang[? "INGAME_OHNO"], 1, 1, 0, COL.LIGHT, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
